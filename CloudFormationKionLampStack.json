{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "AWS CloudFormation template for Kion IaC Assignment - Install a LAMP Web Server on Amazon Linux 2",
	"Parameters": {
		"LatestAmazonLinuxAmiId": {
			"Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
			"Default": "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
		}
	},
	"Mappings": {
		"PartitionMap": {
			"aws": {
				"ec2serviceprincipal": "ec2.amazonaws.com"
			},
			"aws-cn": {
				"ec2serviceprincipal": "ec2.amazonaws.com.cn"
			}
		}
	},
	"Resources": {
		"ManagedInstanceRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": [
									"ssm.amazonaws.com",
									{
										"Fn::FindInMap": [
											"PartitionMap",
											{
												"Ref": "AWS::Partition"
											},
											"ec2serviceprincipal"
										]
									}
								]
							},
							"Action": "sts:AssumeRole"
						}
					]
				},
				"ManagedPolicyArns": [
					{
						"Fn::Join": [
							"",
							[
								"arn:",
								{
									"Ref": "AWS::Partition"
								},
								":iam::aws:policy/AmazonSSMManagedInstanceCore"
							]
						]
					}
				],
				"Path": "/",
				"Policies": [
					{
						"PolicyName": "putParameter",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Effect": "Allow",
									"Action": [
										"ssm:PutParameter"
									],
									"Resource": {
										"Fn::Join": [
											"",
											[
												"arn:",
												{
													"Ref": "AWS::Partition"
												},
												":ssm:*:*:parameter/Tutorials/Passwords/AL2/*"
											]
										]
									}
								}
							]
						}
					},
					{
						"PolicyName": "CodeDeployDemo-EC2-Permissions",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Effect": "Allow",
									"Action": [
										"s3:Get*",
										"s3:List*"
									],
									"Resource": [
										"arn:aws:s3:::replace-with-your-s3-bucket-name/*",
										"arn:aws:s3:::aws-codedeploy-us-east-2/*",
										"arn:aws:s3:::aws-codedeploy-us-east-1/*",
										"arn:aws:s3:::aws-codedeploy-us-west-1/*",
										"arn:aws:s3:::aws-codedeploy-us-west-2/*",
										"arn:aws:s3:::aws-codedeploy-ca-central-1/*",
										"arn:aws:s3:::aws-codedeploy-eu-west-1/*",
										"arn:aws:s3:::aws-codedeploy-eu-west-2/*",
										"arn:aws:s3:::aws-codedeploy-eu-west-3/*",
										"arn:aws:s3:::aws-codedeploy-eu-central-1/*",
										"arn:aws:s3:::aws-codedeploy-ap-east-1/*",
										"arn:aws:s3:::aws-codedeploy-ap-northeast-1/*",
										"arn:aws:s3:::aws-codedeploy-ap-northeast-2/*",
										"arn:aws:s3:::aws-codedeploy-ap-southeast-1/*",
										"arn:aws:s3:::aws-codedeploy-ap-southeast-2/*",
										"arn:aws:s3:::aws-codedeploy-ap-south-1/*",
										"arn:aws:s3:::aws-codedeploy-sa-east-1/*"
									]
								}
							]
						}
					},
					{
						"PolicyName": "iamcodedeploypolicy",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Effect": "Allow",
									"Action": [
										"autoscaling:*",
										"codedeploy:*",
										"ec2:*",
										"lambda:*",
										"ecs:*",
										"elasticloadbalancing:*",
										"iam:AddRoleToInstanceProfile",
										"iam:AttachRolePolicy",
										"iam:CreateInstanceProfile",
										"iam:CreateRole",
										"iam:DeleteInstanceProfile",
										"iam:DeleteRole",
										"iam:DeleteRolePolicy",
										"iam:GetInstanceProfile",
										"iam:GetRole",
										"iam:GetRolePolicy",
										"iam:ListInstanceProfilesForRole",
										"iam:ListRolePolicies",
										"iam:ListRoles",
										"iam:PutRolePolicy",
										"iam:RemoveRoleFromInstanceProfile",
										"s3:*",
										"ssm:*"
									],
									"Resource": [
										"*"
									]
								}
							]
						}
					}
				]
			}
		},
		"ManagedInstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Path": "/",
				"Roles": [
					{
						"Ref": "ManagedInstanceRole"
					}
				],
				"InstanceProfileName": "ManagedInstanceProfileKIONIaCLAMPAL2"
			}
		},
		"VPC": {
			"Type": "AWS::EC2::VPC",
			"Properties": {
				"CidrBlock": "10.0.0.0/16",
				"EnableDnsSupport": true,
				"EnableDnsHostnames": true,
				"InstanceTenancy": "default",
				"Tags": [
					{
						"Key": "Name",
						"Value": "Kion-IaC-LAMPStack-AL2"
					}
				]
			}
		},
		"InternetGateway": {
			"Type": "AWS::EC2::InternetGateway",
			"Properties": {
				"Tags": [
					{
						"Key": "Name",
						"Value": "Kion-IaC-LAMPStack-AL2"
					}
				]
			}
		},
		"VPCGatewayAttachment": {
			"Type": "AWS::EC2::VPCGatewayAttachment",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"InternetGatewayId": {
					"Ref": "InternetGateway"
				}
			}
		},
		"SubnetPublic": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"AvailabilityZone": {
					"Fn::Select": [
						0,
						{
							"Fn::GetAZs": ""
						}
					]
				},
				"CidrBlock": "10.0.0.0/20",
				"MapPublicIpOnLaunch": true,
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": "Kion-IaC-LAMPStack-AL2"
					}
				]
			}
		},
		"RouteTablePublic": {
			"Type": "AWS::EC2::RouteTable",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": "Kion-IaC-LAMPStack-AL2"
					}
				]
			}
		},
		"RouteTableAssociationPublic": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "SubnetPublic"
				},
				"RouteTableId": {
					"Ref": "RouteTablePublic"
				}
			}
		},
		"RouteTablePublicInternetRoute": {
			"Type": "AWS::EC2::Route",
			"DependsOn": "VPCGatewayAttachment",
			"Properties": {
				"RouteTableId": {
					"Ref": "RouteTablePublic"
				},
				"DestinationCidrBlock": "0.0.0.0/0",
				"GatewayId": {
					"Ref": "InternetGateway"
				}
			}
		},
		"NetworkAclPublic": {
			"Type": "AWS::EC2::NetworkAcl",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": "Kion-IaC-LAMPStack-AL2"
					}
				]
			}
		},
		"SubnetNetworkAclAssociationPublic": {
			"Type": "AWS::EC2::SubnetNetworkAclAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "SubnetPublic"
				},
				"NetworkAclId": {
					"Ref": "NetworkAclPublic"
				}
			}
		},
		"NetworkAclEntryInPublicAllowAll": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "NetworkAclPublic"
				},
				"RuleNumber": 100,
				"Protocol": -1,
				"RuleAction": "allow",
				"Egress": false,
				"CidrBlock": "0.0.0.0/0"
			}
		},
		"NetworkAclEntryOutPublicAllowAll": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "NetworkAclPublic"
				},
				"RuleNumber": 100,
				"Protocol": -1,
				"RuleAction": "allow",
				"Egress": true,
				"CidrBlock": "0.0.0.0/0"
			}
		},
		"InstanceSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Security Group created for AWS-InstallLAMPWebServer",
				"GroupName": "Kion-IaC-LAMPStack-AL2-HTTP",
				"SecurityGroupIngress": [
					{
						"IpProtocol": "tcp",
						"FromPort": 80,
						"ToPort": 80,
						"CidrIp": "0.0.0.0/0"
					}
				],
				"SecurityGroupEgress": [
					{
						"IpProtocol": -1,
						"FromPort": 0,
						"ToPort": 65535,
						"CidrIp": "0.0.0.0/0"
					}
				],
				"Tags": [
					{
						"Key": "Name",
						"Value": "Kion-IaC-LAMPStack-AL2"
					}
				],
				"VpcId": {
					"Ref": "VPC"
				}
			}
		},
		"LinuxEc2Instance": {
			"Type": "AWS::EC2::Instance",
			"Metadata": {
				"AWS::CloudFormation::Init": {
					"services": {
						"sysvint": {
							"codedeploy-agent": {
								"enabled": "true",
								"ensureRunning": "true"
							}
						}
					}
				}
			},
			"Properties": {
				"InstanceType": "t2.small",
				"ImageId": {
					"Ref": "LatestAmazonLinuxAmiId"
				},
				"NetworkInterfaces": [
					{
						"AssociatePublicIpAddress": "true",
						"DeviceIndex": "0",
						"GroupSet": [
							{
								"Ref": "InstanceSecurityGroup"
							}
						],
						"SubnetId": {
							"Ref": "SubnetPublic"
						}
					}
				],
				"IamInstanceProfile": {
					"Ref": "ManagedInstanceProfile"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": "Kion-IaC-LAMPStack-AL2"
					}
				]
			}
		}
	},
	"UserData": {
		"Fn::Base64": {
			"Fn::Join": [
				"",
				[
					"#!/bin/bash -ex\n",
					"yum update -y aws-cfn-bootstrap\n",
					"yum install -y aws-cli\n",
					"# Helper function.\n",
					"function error_exit\n",
					"{\n",
					"  /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '",
					{
						"Ref": "WaitHandle"
					},
					"'\n",
					"  exit 1\n",
					"}\n",
					"# Install the AWS CodeDeploy Agent.\n",
					"cd /home/ec2-user/\n",
					"aws s3 cp 's3://aws-codedeploy-us-east-1/latest/codedeploy-agent.noarch.rpm' . || error_exit 'Failed to download AWS CodeDeploy Agent.'\n",
					"yum -y install codedeploy-agent.noarch.rpm || error_exit 'Failed to install AWS CodeDeploy Agent.' \n",
					"/opt/aws/bin/cfn-init -s ",
					{
						"Ref": "AWS::StackId"
					},
					" -r LinuxEC2Instance --region ",
					{
						"Ref": "AWS::Region"
					},
					" || error_exit 'Failed to run cfn-init.'\n",
					"# All is well, so signal success.\n",
					"/opt/aws/bin/cfn-signal -e 0 -r \"AWS CodeDeploy Agent setup complete.\" '",
					{
						"Ref": "WaitHandle"
					},
					"'\n"
				]
			]
		}
	},
	"Outputs": {
		"TemplateID": {
			"Description": "Template id.",
			"Value": "vpc"
		},
		"SubnetPublic": {
			"Description": "Subnet A public.",
			"Value": {
				"Ref": "SubnetPublic"
			},
			"Export": {
				"Name": {
					"Fn::Sub": "${AWS::StackName}-SubnetPublic"
				}
			}
		}
	}
}
